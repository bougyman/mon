#!/usr/bin/perl
#
# Use try to connect to an MUPDATE server, and
# wait for the right output.  (MUPDATE is a core part
# of a distributed Cyrus IMAP server infrastructure.)
#
# For use with "mon".
#
# Arguments are "-p port -t timeout host [host...]"
#
# Adapted from "imap.monitor" by
# David Nolan, vitroth+mon@cmu.edu
#
# Which was dapted from "http.monitor" by
# Jim Trocki, trockij@transmeta.com
#
# http.monitor written by
#
# Jon Meek
# American Cyanamid Company
# Princeton, NJ
#
# $Id: mupdate.monitor,v 1.1 2005/08/20 15:24:50 vitroth Exp $
#
#    Copyright (C) 1998, Jim Trocki
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
use Getopt::Std;
use English;

getopts ("p:t:");
$PORT = $opt_p || 3905;
$TIMEOUT = $opt_t || 30;

@failures = ();

foreach $host (@ARGV) {

    if (! &mupdateGET($host, $PORT)) {
	push (@failures, $host);
    }
}

if (@failures == 0) {
    exit 0;
}

print join (" ", sort @failures), "\n\n", join ("\n", @longerr), "\n";

exit 1;


sub mupdateGET {
    use Socket;
    use Sys::Hostname;

    my($Server, $Port) = @_;
    my($ServerOK, $TheContent);

    $ServerOK = 0;

    $TheContent = '';

    $Path = '/';

###############################################################
    eval {

	local $SIG{ALRM} = sub { die "Timeout Alarm" };
	alarm $TIMEOUT;
	$result = &OpenSocket($Server, $Port); # Open a connection to the server
	if ($result == 0) { # Failure to open the socket
	    push @longerr, "$Server: Unable to connect";
	    return '';
	}

	my $error = 0;
	$in = <S>;
	if ($in !~ /^\* AUTH/) {
	    $error = 1;
	} else {
	    $in = <S>;
	    while ($in !~ /^\* OK MUPDATE/) {
		$in = <S>;
	    }
	}

	if($error) {
	  alarm 0;
	  push @longerr, "$Server: No MUPDATE banner received";
	  return 0;
	}

	print S "L LOGOUT\r\n";

	while (defined($in=<S>)) {
	    if ($in =~ /^L OK/) {
	        $ServerOK = 1;
		last;
	    }
	}
	
	if (!$ServerOK) {
	  push @longerr, "$Server: No response to logout";
	}

	close(S);
	alarm 0; # Cancel the alarm
    };

    if ($EVAL_ERROR and ($EVAL_ERROR =~ /^Timeout Alarm/)) {
	push @longerr, "$Server: **** Time Out\n";
	return 0;
    } elsif ($EVAL_ERROR) {
        push @longerr, "$Server: $EVAL_ERROR";
        return 0;
    }
    return $ServerOK;

}

sub OpenSocket {
#
# Make a Berkeley socket connection between this program and a TCP port
#  on another (or this) host. Port can be a number or a named service
#
    local($OtherHostname, $Port) = @_;
    local($OurHostname, $sockaddr, $name, $aliases, $proto, $type, $len,
	  $ThisAddr, $that);
    $OurHostname = &hostname;

    ($name, $aliases, $proto) = getprotobyname('tcp');
    ($name, $aliases, $Port) = getservbyname($Port, 'tcp') unless $Port =~ /^\d+$/;
    ($name, $aliases, $type, $len, $ThisAddr) = gethostbyname($OurHostname);
    ($name, $aliases, $type, $len, $OtherHostAddr) = gethostbyname($OtherHostname);

    my $that = sockaddr_in ($Port, $OtherHostAddr);

    $result = socket(S, &PF_INET, &SOCK_STREAM, $proto) || return undef;

    $result = connect(S, $that) || return undef;

    select(S); $| = 1; select(STDOUT);      # set S to be un-buffered
    return 1;                               # success
}
