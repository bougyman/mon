From ctbates@tva.gov Mon Aug 23 06:55:41 1999
Date: Thu, 08 Jul 1999 11:03:40 -0400
From: Tom Bates <ctbates@tva.gov>
To: mon@linux.kernel.org, meir@education.gov.il
Subject: Repost of smtp_rt.monitor

My previous attempt to post this did not make it out of our MS email
system intact. Here it is again:

I modified smpt.monitor to watch an email gateway between smpt and MS
Exchange, but presumably it could watch any email gateway. 
smtp_rt.monitor sends an empty message to the monitored mailbox beyand
the gateway (monitored_mailbox@yourdomain.com), which sends a return
receipt back to a mailbox on the MON host, which has a .forward file
piped to mail_handler (e.g., |/home/yourname/mail_handler) which handles
the return receipt and lets the monitor know that the round-trip was
successful.  

Tom Bates
TVA
=============.forward==============
|/home/yourname/mail_handler
=============end .forward==============

=============mail_handler==============
#!/usr/bin/perl
@msg = <STDIN>;
$x = 0;
while ($x < @msg) {
  if ($msg[$x] =~/^Subject:/) {
    $msg[$x] =~s/^Subject: Delivered: //; 
    $timestamp = $msg[$x];
    chop ($timestamp);
    }
$x++;
}
open (OUTFILE, ">/tmp/$timestamp");
close (OUTFILE);
=============end mail_handler==============

=============smtp_rt.monitor==============
#!/usr/bin/perl
# smpt_rt.monitor
# Tries to connect to a SMTP server, send a timestamped message, and
# wait for the return receipt to arrive within the timeout period.
#
# Tom Bates
# Tennessee Valley Authority
# ctbates@tva.gov
#
# For use with "mon".
#
# Arguments are "-p port -t timeout host [host...]"
#
# Adapted from "smtp.monitor" , which was
# Adapted from "http.monitor" by
# Jim Trocki, trockij@transmeta.com
#
# http.monitor written by
#
# Jon Meek
# American Cyanamid Company
# Princeton, NJ
#
# $Id: smtp_rt.monitor,v 1.1.1.1 2005/02/18 17:52:24 trockij Exp $
#
#    Copyright (C) 1998, Jim Trocki
#
#    This program is free software; you can redistribute it and/or
modify
#    it under the terms of the GNU General Public License as published
by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
02111-1307  USA
#
use Getopt::Std;
use English;

getopts ("p:t:");
$PORT = $opt_p || 25;
$TIMEOUT = $opt_t || 30;
$timestamp = substr int(time),0;

@failures = ();

foreach $host (@ARGV) {

    if (! &smtpGET($host, $PORT)) {
	push (@failures, $host);
    }
}

if (@failures == 0) {
    exit 0;
}

print "@failures\n";

exit 1;


sub smtpGET {
    use Socket;
    use Sys::Hostname;

    my($Server, $Port) = @_;
    my($ServerOK, $TheContent);

    $ServerOK = 0;

    $TheContent = '';

    $Path = '/';

###############################################################
    eval {

	local $SIG{ALRM} = sub { die "Timeout Alarm" };
	alarm $TIMEOUT;
	$result = &OpenSocket($Server, $Port); # Open a connection to the
server
	if ($result == 0) { # Failure to open the socket
	    return '';
	}

	$in = <S>;
	$in = <S> while $in =~ /^220-/;
	if ($in !~ /^220 /) {
	    alarm 0;
	    return 0;
	}

	print S "HELO monhost\r\n";
	$in = <S>;
	$in = <S> while $in =~ /^250-/;
	if ($in !~ /^250 /) {
	    alarm 0;
	    return 0;
	}

print S "mail from: yourname\@monserver.yourdomain.com\r\n";
	$in = <S>;
	$in = <S> while $in =~ /^250-/;
	if ($in !~ /^250 /) {
	    alarm 0;
	    return 0;
	}

print S "rcpt to: monitored_mailbox\@yourdomain.com\r\n";
	$in = <S>;
	$in = <S> while $in =~ /^250-/;
	if ($in !~ /^250 /) {
	    alarm 0;
	    return 0;
	}

print S "data\r\n";
	$in = <S>;
	$in = <S> while $in =~ /^354-/;
	if ($in !~ /^354 /) {
	    alarm 0;
	    return 0;
	}

print S "To: monitored_mailbox\@yourdomain.com\nFrom:
mon_rt\@monserver.yourdomain.com\nSubject:
MON_$timestamp\nReturn-Receipt-To:
yourname\@monserver.yourdomain.com\n\n.\n";

	$in = <S>;
	$in = <S> while $in =~ /^250-/;
	if ($in !~ /^250 /) {
	    alarm 0;
	    return 0;
	}

print S "quit\r\n";

	$in = <S>;
	if ($in !~ /^221 /) {
	    alarm 0;
	    return 0;
	}

$returning_file = 0;
while ($returning_file == 0) {
    $returning_file = 1;
    sleep 5;
    open (TMPFILE, "/tmp/MON_$timestamp") or $returning_file = 0;
    }


	$ServerOK = 1;

	close(S);
	alarm 0; # Cancel the alarm

    };

    if ($EVAL_ERROR and ($EVAL_ERROR eq 'Timeout Alarm')) {
	print "**** Time Out\n";
	return 0;
    }
    return $ServerOK;

}

sub OpenSocket {
#
# Make a Berkeley socket connection between this program and a TCP port
#  on another (or this) host. Port can be a number or a named service
#
    local($OtherHostname, $Port) = @_;
    local($OurHostname, $sockaddr, $name, $aliases, $proto, $type, $len,
	  $ThisAddr, $that);
    $OurHostname = &hostname;

    ($name, $aliases, $proto) = getprotobyname('tcp');
    ($name, $aliases, $Port) = getservbyname($Port, 'tcp') unless $Port
=~ /^\d+$/;
    ($name, $aliases, $type, $len, $ThisAddr) =
gethostbyname($OurHostname);
    ($name, $aliases, $type, $len, $OtherHostAddr) =
gethostbyname($OtherHostname);

    $sockaddr = 'S n a4 x8';    # Format for packed network address
    $that = pack($sockaddr, &AF_INET, $Port, $OtherHostAddr);

    $result = socket(S, &PF_INET, &SOCK_STREAM, $proto) || return undef;

    $result = connect(S, $that) || return undef;

    select(S); $| = 1; select(STDOUT);      # set S to be un-buffered
    return 1;                               # success
}
=============end smtp_rt.monitor==============

